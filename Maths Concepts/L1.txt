Binary exponentiation
Can calculate a^b in O(logb)
previuosly it was O(b)


a^b =  a^(b/2) ^ 2  if b - even
       a^(b/2) ^ 2 * a if b- odd



int findPow(int a,int b){
	if(b<1) retrun 1;
	int temp = findPow(a,b/2);
	int result = temp*temp;
	if(b%2==1) result = result * a;
	return result;
}


Sieve of Eratosthenes
	A)Checking primality(Running loop and checking if any number exist which is factor other than 1 and itself)
		i)2 to n-1  O(n)
		ii)2 to n/2 O(n/2)
		iii)2 to √n , because of symmetry as a*b == b*a O(√n)
	B)Output all prime numbers upto number
		i)Naive approach 
			for(int i=2;i<=n;i++){
				isPrime(i);
			}
			O(n*√n)
		ii)Sieve of Eratosthenes
			Mark initially all as prime now if any number is marked as true mark their multi as false
			vector<bool> status(n+1,true);
       		status[0] = false;
        	status[1] = false;
        
			for(int i=2;i<=sqrt(n);i++){ Only hav to check till √n as they will mark all non-prime
				if(status[i]){
					for(int j=2;i*j<=n;j++) status[i*j] = false;
				}
			}
			vector<int> r;
			for(int i=2;i<=n;i++){
				if(status[i]) r.push_back(i);
			}
        
        	return r;
			O(n* log(log(n))) (n/2+n/3+n/4..)

Finding median of k sized subarrays
	A)Brute force - sliding window + (sort the subarray then find median)
	B)sliding window + optimal approach
		i)Take two data structures(left and right)
		ii)if(size(left)<=size(right)) insert in left else in right
		iii)if max(left) > min(right) swap then median=left.rbegin()
		iv)Use multiset (which stores in sorted order and duplicates are allowed) 