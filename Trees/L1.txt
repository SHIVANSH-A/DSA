Binary Tree
    1)Types
        i)Full - 0 or 2 children
        ii)Complete-All levels should be completely filled
        iii)Perfect-All leaf nodes are at same level
        iv)Balanced-height of tree max logm
        v)Degenerate-Every node has single children(Linear)
    2)Representation
        Struct Node{
            int data;
            Struct node *left;
            Struct node *right;
            Node(int val){
                data = val;
                left=right=null;
            }
        }

        main(){
            Struct Node *root = new Node(1);
            root->left=new Node(10);
        }
    3)Traversal
        i)INORDER TRAVERSAL (left root right) (root is at 2 - so traverse, if a node is visited second time it will be added to result)
            void inorder(node){
                if(node==null) return;

                inorder(node->left);
                cout<<node->data;
                inorder(node->right);
            }
            Code - 
                /**
                * Definition for a binary tree node.
                * struct TreeNode {
                *     int val;
                *     TreeNode *left;
                *     TreeNode *right;
                *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                * };
                */
                class Solution {
                public:
                    vector<int> inorderTraversal(TreeNode* root) {
                        vector<int> result;
                        stack<TreeNode*> st;
                        if(root==NULL) return result;

                        while(true){
                            if(root!=NULL){
                                st.push(root);
                                root = root->left;
                            }else{
                                if(st.empty()) break;
                                root = st.top();
                                st.pop();
                                result.push_back(root->val);
                                root = root->right;
                            }
                        }

                        return result;
                    }
                };
        ii)PREORDER TRAVERSAL (root left right) (root is at 1 - so traverse, if a node is visited first time it will be added to result)
            void preorder(node){
                if(node==null) return;

                cout<<node->data;
                preorder(node->left);
                preorder(node->right);
            }
            Code - 
                /**
                * Definition for a binary tree node.
                * struct TreeNode {
                *     int val;
                *     TreeNode *left;
                *     TreeNode *right;
                *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                * };
                */
                class Solution {
                public:
                    vector<int> preorderTraversal(TreeNode* root) {
                        vector<int> result;
                        stack<TreeNode*> st;
                        if(root==NULL) return result;
                        st.push(root);

                        while(!st.empty()){
                            TreeNode *node = st.top();
                            st.pop();
                            result.push_back(node->val);
                            if(node->right) st.push(node->right);
                            if(node->left) st.push(node->left);
                        }
                        return result;
                    }
                };
        iii)POSTORDER TRAVERSAL (left right root) (root is at 3 - so traverse, if a node is visited third time it will be added to result)
            void postorder(node){
                if(node==null) return;

                postorder(node->left);
                postorder(node->right);
                cout<<node->data;
            }
            Code -
                //Using two stacks
                /**
                * Definition for a binary tree node.
                * struct TreeNode {
                *     int val;
                *     TreeNode *left;
                *     TreeNode *right;
                *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                * };
                */
                class Solution {
                public:
                    vector<int> postorderTraversal(TreeNode* root) {
                        vector<int> result;
                        stack<TreeNode*> st1,st2;
                        if(root==NULL) return result;

                        st1.push(root);

                        while(st1.empty()==false){
                            TreeNode *node = st1.top();
                            st1.pop();
                            st2.push(node);
                            if(node->left)  st1.push(node->left);
                            if(node->right) st1.push(node->right);
                        }

                        while(st2.empty()==false){
                            result.push_back(st2.top()->val);
                            st2.pop();
                        }
                        return result;
                    }
                };

                //One stack
                /**
                * Definition for a binary tree node.
                * struct TreeNode {
                *     int val;
                *     TreeNode *left;
                *     TreeNode *right;
                *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                * };
                */
                class Solution {
                public:
                    vector<int> postorderTraversal(TreeNode* root) {
                        vector<int> result;
                        stack<TreeNode*> st;
                        if(root==NULL) return result;

                        TreeNode *curr = root;

                        while(curr!=NULL || st.empty()==false){
                        if(curr!=NULL){
                            st.push(curr);
                            curr = curr->left;
                        }else{
                            TreeNode *temp = st.top()->right;
                            if(temp==NULL){
                                temp = st.top();
                                st.pop();
                                result.push_back(temp->val);
                                while(st.empty()==false && temp==st.top()->right ){
                                    temp = st.top();
                                    st.pop();
                                    result.push_back(temp->val);
                                }
                            }else{
                                    curr = temp;
                                }
                        }
                        }
                        return result;
                    }
                };
        iv)BFS
            /**
            * Definition for a binary tree node.
            * struct TreeNode {
            *     int val;
            *     TreeNode *left;
            *     TreeNode *right;
            *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
            *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
            *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
            * };
            */
            class Solution {
            public:
                vector<vector<int>> levelOrder(TreeNode* root) {
                    vector<vector<int>> result;
                    if(root==NULL) return result;
                    queue<TreeNode*> q;
                    q.push(root);
                    while(!q.empty()){
                        vector<int> level;
                        int size = q.size();
                        for(int i=0;i<size;i++){
                            TreeNode *node = q.front();
                            if(node->left) q.push(node->left);
                            if(node->right) q.push(node->right);
                            q.pop();
                            level.push_back(node->val);
                        }
                        result.push_back(level);
                    }
                    return result;
                }
            };