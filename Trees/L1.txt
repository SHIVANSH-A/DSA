Binary Tree
    1)Types
        i)Full - 0 or 2 children
        ii)Complete-All levels should be completely filled
        iii)Perfect-All leaf nodes are at same level
        iv)Balanced-height of tree max logm
        v)Degenerate-Every node has single children(Linear)
    2)Representation
        Struct Node{
            int data;
            Struct node *left;
            Struct node *right;
            Node(int val){
                data = val;
                left=right=null;
            }
        }

        main(){
            Struct Node *root = new Node(1);
            root->left=new Node(10);
        }
    3)Traversal
        i)INORDER TRAVERSAL (left root right) (root is at 2 - so traverse, if a node is visited second time it will be added to result)
            void inorder(node){
                if(node==null) return;

                inorder(node->left);
                cout<<node->data;
                inorder(node->right);
            }
        ii)PREORDER TRAVERSAL (root left right) (root is at 1 - so traverse, if a node is visited first time it will be added to result)
            void preorder(node){
                if(node==null) return;

                cout<<node->data;
                preorder(node->left);
                preorder(node->right);
            }
        iii)POSTORDER TRAVERSAL (left right root) (root is at 3 - so traverse, if a node is visited third time it will be added to result)
            void postorder(node){
                if(node==null) return;

                postorder(node->left);
                postorder(node->right);
                cout<<node->data;
            }