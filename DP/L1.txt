Dynamic Programming

i)Overlapping problem (Recursion)

Certain values are recomputed many times which overlaps that can be stored
ex-Fibonacci
              f(5)
         ↙    ↘
      f(4)   f(3)
      ↙  ↘
   f(3)=2 f(2)
   ↙   ↘
f(2)=1  f(1)
↙   ↘
f(1) f(0)
Like in this case f(2),f(3) is computed one time but f(4) will again call f(2) and it will again call subsequent functions.
That's Overlapping. 


ii)Memoization - Tends to store the value of subproblems in table/map.
Thus no need to recompute.

Steps -  1)Declare dp data structure(array/map).
         2)At each subproblems call ,store the value.
         3)Check that if the value of subproblems is stored or not.If already stored, directly take from there no need of calling again.


ex - Fibonacci

f(int n,vector<int> &dp){
    if(n<=1) return n;

    if(dp[n]!=-1) return dp[n];

    return dp[n] = f(n-1) + f(n-2);

}

int main(){
    vector<int> dp(n+1,-1);

    cout<<f(n,dp);
    return 0;
}