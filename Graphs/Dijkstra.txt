Dikstra's Algorithm
    Dijkstraâ€™s Algorithm is a greedy algorithm used to find the shortest path from a source node to 
    all other nodes in a weighted graph with non-negative edge weights.
    1)Implementation
        i)Using Priority queue(min-heap)
            a)Use Priority queue with pair<int,int> it will store distance and curr-node.
            b)Create a result array of size V, initialized with INT_MAX to represent infinite distances.
            c)Set result[src] = 0 since the distance from source to itself is 0.
            d)Push the source into the queue: {0, src} where 0 is the distance.
            e)Now iterate on graph using Priority-queue and push the pair if minimum dist is found,after all iterations result vector will have all the min distances from source node.
            Code -
                class Solution {
                    public:
                        vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
                            // Code here
                            priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
                            vector<vector<pair<int,int>>> adj(V);
                            
                            for(auto &i:edges){
                                int u = i[0];
                                int v = i[1];
                                int wt = i[2];
                                
                                adj[u].push_back({v,wt});
                                adj[v].push_back({u,wt});
                            }
                            
                            vector<int> result(V,INT_MAX);
                            result[src] = 0;
                            pq.push({0,src});
                            
                            
                            while(!pq.empty()){
                                int u = pq.top().second;
                                int d = pq.top().first;
                                pq.pop();
                                
                                for(auto &v:adj[u]){
                                    int node = v.first;
                                    int wt = v.second;
                                    
                                    if(d+wt<result[node]){
                                        result[node] = d+wt;
                                        pq.push({d+wt,node});
                                    }
                                }
                            }
                            return result;
                        }
                    };
        T.C - O(V*(logV + ElogV)) - O(VElogV)
        Problem - Extra processing 
                  result = [6,2,3,1]
                  if at any point we encounter {3,0} from priority_queue and and distance of prev node is 1
                   then total distance to reach 0 is 4 .But 0 has 6 which means in priority_queue there will be {6,0} which will be again processed.
                   To avoid this use set in which we can erase it. 
        Queue - We can implement it using queue but it will take lots of iterations to reach minimum dist.

        ii)Set
            class Solution {
            public:
                vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
                    // Code here
                    set<pair<int,int>> st;
                    vector<vector<pair<int,int>>> adj(V);
                    
                    for(auto &i:edges){
                        int u = i[0];
                        int v = i[1];
                        int wt = i[2];
                        
                        adj[u].push_back({v,wt});
                        adj[v].push_back({u,wt});
                    }
                    
                    vector<int> result(V,INT_MAX);
                    result[src] = 0;
                    st.insert({0,src});
                    
                    
                    while(!st.empty()){
                        auto it = *st.begin();
                        int u = it.second;
                        int d = it.first;
                        st.erase({d,u});
                        
                        for(auto &v:adj[u]){
                            int node = v.first;
                            int wt = v.second;
                            
                            if(d+wt<result[node]){
                                if(result[node]!=INT_MAX){
                                    st.erase({result[node],node});
                                    // auto it = st.find({result[node],node});
                                    // st.erase(it);
                                }
                                result[node] = d+wt;
                                st.insert({d+wt,node});
                            }
                        }
                    }
                    return result;
                }
            };