Graph

1)Representation

i)Adjacency matrix
A 2D matrix which will have entry for edges.
Directed - A->B = M[A][B]
Undirected - A-B = M[A][B] AND M[B][A]
ENTRY : WEIGHTED - WEIGHTS
	ELSE - 1 AND 0

ii)Adjacency list
A MAP or LIST which will have edges for each node
unordered_map<u,v> adj -> (u-node,v-shows edges(vector,values are nodes))
ex- 2->[0,1]
There is edge from 2 to 0 and 1. 

unordered_map<int, vector<int>> adj; 
for(vecor<int> &vec : prerequisites) { 
	int v = vec[1]; 
	int u = vec[0]; 
	adj[u].push_back(v); 
}  
/* 
	n=4 
(Vertices: 0, 1, 2, 3) 
prerequisites- [[1,0], [2,0], [2,1], [3,1]] 
*/


HOW to know that que is of graphs?
i)That entity mentioned will be numbered
ii)Relation - hinting towards edge of graph
iii)Directly mention graph 



2)Traversal
i)DFS
explore a neighbour then again one of its neighbour.
(depth - linear) use stack

CODE-
vector<bool> visited(v,false);
vector<int> results;
DFS(adj,u,visited,results)


DFS(undordered_map<int,vector<int>>,int u,vector<bool> &visited,vector<int> &results){
	if(visited[u]==true){
		return;	
	}
	
	visited[u]=true;
	results.push_back(u);
	//Exploring neighbours of u
	for(auto &v:adj[u]){
		if(!visited[v]){
			DFS(adj,v,visited,results);
		}
	}

	/*for (int v = 0; v < adjMatrix[u].size(); v++) {
        if (adjMatrix[u][v] == 1 && !visited[v]) {
            DFS(adjMatrix, v, visited, results);
        }
    }*/

}


ii)BFS
explore all neighbours then their neighbours.
(breadth - level) use queue 
For shortest path 

CODE-
vector<bool> visited(v,false);
vector<int> results;
BFS(adj,u,visited,results)


BFS(undordered_map<int,vector<int>>,int u,vector<bool> &visited,vector<int> &results){
	queue<int> q;
	q.push(u);
	visited[u] = true;
	results.push_back(u);
	
	while(!q.empty()){
		int u = q.front();
		q.pop();
		for(auto &v:adj[u]){
			if(!visited[v]){
				q.push(v);
				visited[v] = true;
				results.push_back(v);
			}
		}
	}

}

3)Cycle detection
i)Undirected
DFS(If the next node is not parent also it is visited then cylce is present,take case of graph with only two nodes 1--10)
vector<bool> visited(V, false); 
	for(int i = 0; i<V; i++) { 
		if(!visited[i] && isCycleDFS(adj, i, visited, -1)) { //This to traverse the graph which have different broken components
			return true; 
		} 
	} 

return false;


bool isCycleDFS(vector<int> adj[], int u, vector<bool>& visited,int parent){
	visited[u] = true; 
	for(int &v: adj[u]) { 
		if(v == parent) continue; 
		if(visited[v]) return true; 
		if(isCycleDFS(adj, v, visited, u)) {
			return true; 
		} 
	}
	return false;
}


BFS(If the next node is not parent also it is visited then cylce is present and use queue with pair here for storing parent)
vector<bool> visited(V, false); 
	for(int i = 0; i<V; i++) { 
		if(!visited[i] && isCycleDFS(adj, i, visited)) { 
			return true; 
		} 
	} 

return false;
 
bool isCycleBFS(vector<int> adj[], int u, vector<bool>& visited) { 
	queue<pair<int, int>> que; 
	que.push({u, -1}); 
	visited[u] = true; 
	while(!que.empty()) { 
		pair<int, int> P =que.front(); 
		que.pop(); 
		int source = P.first; 
		int parent = P.second; 
		for(int &v: adj [source]) { 
			if(visited[v] == false) { 
				visited[v] = true; 
				que.push({v, source}); 
			} else if(v != parent) { 
				return true; 
			} 
	}
	return false;
 }
 

ii)Directed
DFS(Here if next node is visited and also it is part of current recursion then cycle is present)
vector<bool> visited(V, false);
vector<bool> isRecursion(V, false); 
	for(int i = 0; i<V; i++) { 
		if(!visited[i] && isCycleDFS(adj, i, visited,isRecursion)) { 
			return true; 
		} 
	}
 
return false;


bool isCycleDFS(vector<int> adj[], int u, vector<bool>& visited, vector<bool> isRecursion){
	visited[u] = true; 
	inRecursion [u] = true; 
	for(int &v: adj[u]) { 
		//if not visited, then we check for cycle in DFS 
		if(visited[v] == false && isCycleDFS(adj, v, visited, inRecursion)){ 
			return true; }
		else if(inRecursion [v] == true) 
			return true; }
	}

	isRecursion[u] = false;
	return false;
}
BFS(Topological sort is applied only to DAG if topological sort using Kahn's algo can't be applied then cycle is present - As because every node will not be inserted in que because of cycle indegree of some nodes will never be 0 )
bool topoSort(int N, vector<vector<int>>& edges) {
        queue<int> que;
        //Calculating Indegree
        vector<int> indegree={0};
        for(int i=0;i<N;i++){
            for(int &v:edges[i]){
                indegree[v]++;
            }
        }
        
        //Pushing vertices with indegree 0 to queue
        for(int i=0;i<N;i++){
            if(indegree[i]==0) que.push(i);
        }
        
        vector<int> results;
        //BFS with pushing only when indegree 0
        while(!que.empty()){
            int u = que.front();
            que.pop();
            results.push_back(u);
            
            for(int v : edges[u]){
                indegree[v]--;
                if(indegree[v]==0) que.push(v);
            }
        }

	if(results.size()==N) return false;
        return true;
    } 
	

	Note - Iteration using BFS on matrix: Use direction vector which have all possible combina
		vector<vector<int>> directions{{-1,0},{-1,1},{0,1},{1,1},{1,0},{-1,-1},{0,-1},{1,-1}};
		for(auto &dir:directions){
                    int x_ = x + dir[0];
                    int y_ = y + dir[1];

                    if(logic){
                        q.push({x_,y_});
                        grid[x_][y_] = 1;
                    }
                }