Queue
Linear data stru that supports FIFO (One end for insert and other for remove)
Operations
i)Enqueue
ii)Dequeue
iii)IsEmpty,IsFull
iv)Front
v)size


Types
i)Simple
ii)Priority
iii)Circular
iv)Double-ended(enqueue and dequeue can be done from both the ends)

implementation
i)Arrays
class Queue{
    vector<int> v;
    int front,back;
    public:
    Queue() {
    back = -1;
    front = -1;
    }
    void enqueue(int data) {
        this->v.push_back(data);
        this->back++;
        if(front==-1) front++;
    }
    void dequeue() {
        if(this->front == this->back) {
        this->front = -1;
        this->back = -1;
        v.clear();
    }
        else this->front++;
    }
    
    int getfront() {
        if(this->front == -1) return -1;
        return this->v[this->front];
    }
    
    bool isEmpty() {
    return this->front==-1;
    }
    
};

ii)LL(space effi.)
class Node {
    public:
    int data;
    Node* next;
    Node(int data){
        this->data=data;
        next=NULL;
    }
};

class Queue{
    Node* head;
    Node* tail;
    int size;
    public:
    Queue(){
        head=NULL;
        tail=NULL;
        size=0;
    }
    
    void enqueue(int data) {
        Node* newNode =new Node(data);
        if(this->head== NULL) {
        // LL is empty
        this->head = this->tail = newNode;
        } else {
        this->tail->next = newNode;
        this->tail = newNode;
        }
        size++;
    }
    void dequeue(){
        if(head==NULL){
            return;
        }
        else{
            Node* temp = head;
            head=head->next;
            if(head==NULL) tail=NULL;
            free(temp);
        }
        size--;
    }
    int getSize(){
        return size;
    }
    
    bool isEmpty(){
        return head==NULL;
    }
    
    int front(){
        return head->data;
    }
};

int main()
{
    Queue q;
    q.enqueue(1);
    q.enqueue(2);
    q.dequeue();
    cout<<q.getfront()<<endl;

    return 0;
}

iii)stl
int main() {
    queue<int> qu;
    qu.push(10); // enqueue
    qu.push(20);
    qu.push(30);
    qu.push(40);
    qu.pop(); // dequeue
    while(not qu.empty()) {
        cout<<qu.front()<<" ";
        qu.pop();
    }
    return 0;
}

reverse queue - push ele in stack then again in queue
