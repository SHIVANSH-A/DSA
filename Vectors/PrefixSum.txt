i)PrefixSum
void runningSum(vector<int> &v){
	for(int i=1;i<v.size();i++)
		v[i]=v [i-1]+v[i];
	}
}

ii)Check if we can partition the array into two subarrays with equal sum. More formally, check that the prefix sum of a part of the array is equal to the suffix sum of rest of the array.
suffix_sum=prefix_sum
suffix_sum+prefix_sum=total_sum
bool checkPrefixSuffixSum(vector<int> &v){
int total_sum=0;
for(int i=0;i<v.size();i++){
total_sum+=v[i];
}
int prefix_sum=0;
for(int i=0;i<v.size();i++) {
prefix_sum+=v[i];
int suffix_sum = total_sum prefix_sum;
if(suffix_sum==prefix_sum) {
return true;
}
}

return false;

}


iii)Given an array of integers of size n. Answer q queries where you need to print the sum of values in a given range of indices from I to r (both included).
Note: The values of I and r in queries follow 1-based indexing.
Sum = pref[r]-pref[l-1]
int main(){
int n;
cin>>n;
vector<int> v(n+1,0);
for(int i=1;i<=n;i++) {
cin>>v[i];
}
//calculate prefix sum array
for(int i=1;i<=n; i++)
v[i]+=v[i-1];
int q;
cin>>q;
while(q--){
int l,r;
cin>>l>>r;
int ans=0;
// ans = prefixsumarray [r] - prefixsumarray [1-1]
ans = v[r]-v[1-1];
}
return 0;
}

iv)Modulo 
Array - [a,b,c,d,e]
S1 sum from a->c
S2 sum from a->e

if S1%k ==S2%K then S2-S1%K==0

Proof - S1 = K*N1 + R
	S2 = K*N2 + R
S2-S1 = K(N2-N1) = KN


