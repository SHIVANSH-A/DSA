Binary Search 
Searching when the data is sorted.

Code - i)Iterative
        f(a,target){
            int n = a.size();
            int l=0,r=n-1;

            while(l<=r){
                int mid = l + (r-l)/2;

                if(a[mid]==taregt) return mid;
                else if(target<a[mid]) r = mid-1;
                else l = mid +1;
            }

            return -1;
        }
        ii)Recursive
        f(a,target,l,r){
            if(l<=r) return -1;
                
            int mid = l + (r-l)/2;

            if(a[mid]==taregt) return mid;
            else if(target<a[mid]) return f(a,target,l,mid-1);
            return f(a,target,mid+1,r);
            }

Time Complexity - O(Log2N) //As after each iteration search space is divided into half.


Overflow - When search space is of INT_MAX , calcularing mid using (l+r)/2 is not permissible as 2INT_MAX cannot be accomodated in int.
         Solution: i)Using long long for mid
                   ii) Using l + (r-l)/2 //INT_MAX-INT_MAX will be cancelled and no overflow without disturbing the formula.
        