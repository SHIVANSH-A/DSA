Sliding window
Types of problems - templates

1)Constant size window
l and r - two pointers
k - size of window

//For maximum sum of k sized window

l=0 ;
r=k-1;
//take sum = sum from l to r initially
while(r<n){
    sum-=arr[l];
    l++;
    r++;
    sum+=arr[r];
    maxsum = max(sum,maxsum);
}


2)Longest subarray/substring (subarray-continuous)

i)Brute force - Generate all possible subarrays

for(i=0 to n-1){
    for(j=i to n-1){
        condition
    }
}


ii)Better - Use sliding window  (O(N+N))
l,r=0;
while(r<n){
    //normal opr according to condition (sum+=arr[r])

    while(sum>k){//shrinking condition
        //undo operation(sum-=arr[l])
        l++;
    }
    if(sum<=k)
    //desired output condition (maxlen = max(r-l+1,maxlen))

    r++;//Growing condition
}


iii)Optimal - Can be used sometimes
O(N)

if in above ex max length of subarray is asked no need to shrink in while()
l,r=0;
while(r<n){
    //normal opr according to condition (sum+=arr[r])

    if(sum>k){//shrinking condition - only to shrink one place and check next as don't need to reduce maxlen(ex- if max len 3 then no need to check 2)
        //undo operation(sum-=arr[l])
        l++;
    }
    if(sum<=k)
    //desired output condition (maxlen = max(r-l+1,maxlen))

    r++;//Growing condition
}


3)No. of subaarays

Use pattern 2 but sometimes need little modi.

ex- No. of subarrays with sum k
find for sum1<=k then sum2<=k-1 then sum1-sum2. 

4)Shortest window
Use pattern 2 but when a valid window is obtained try to shrink according to condition.


5)Tracking first element within window
Use pattern 2 with queue.

