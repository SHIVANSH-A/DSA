LinkedList
blocks of memory-> node

|Data|Next|

head-> 100 |val|200| -> 200 |val|300| -> 300 |val|NULL| (Tail)

i)Implementation
#include<iostream>
using namespace std;
class Node{
	public:
	int val;
	Node* next; 
	Node(int data){
val = data;
next = NULL;
}
};
int main(){
Node* n = new Node(1);
cout<<n->val<<" "<<n->next<<endl;
return 0;
}

ii)Insertion 
a)Head
void insertAtHead (Node* &head, int val){
    Node* new_node = new Node(val);
    new_node->next = head;  //Ptr in the new node is head
    head=new_node;  // head ptr will point to new node as head
}
void display (Node* head) {
    Node* temp=head;
    while(temp!=NULL) {
    cout<<temp->val<<"->";
    temp = temp->next;
}
    cout<<"NULL"<<endl;
}


int main() {
    Node* head = NULL;
    insertAtHead (head, 2);
    display (head);
    insertAtHead (head, 1);
    display (head);

    return 0;
}
b)Tail
void insertAtTail (Node* &head,int val){
    Node* new_node = new Node(val);
    Node* temp = head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next= new_node;
    
}

c)Kth position
void insert (Node* &head,int val,int pos){
    Node* new_node = new Node(val);
    Node* temp = head;
    int curr = 1;
    if(pos==1){
        insertAtHead(head,val);
    }
    else{
        while(curr!=pos-1){
            temp=temp->next;
            curr++;
        }
        new_node->next=temp->next;
        temp->next=new_node;
    }
    
}


iii)Deletion
a)Head
void deleteAtHead(Node* &head){
    Node* temp= head;
    head=head->next;
    free(temp);
}

b)Tail
void deleteAtTail(Node* &head){
    Node* lastSec = head;
    while(lastSec->next->next!=NULL){
        lastSec=lastSec->next;
    }
    Node* tail = lastSec->next;
    lastSec->next=NULL;
    free(tail);
    
}

c)kth pos
void deleteNode(Node* &head,int pos){
    Node* temp = head;
    int curr = 1;
    if(pos==1){
        deleteAtHead(head);
    }
    else{
        while(curr!=pos-1){
            temp=temp->next;
            curr++;
        }
        Node* del = temp->next;
        temp->next=del->next;
        free(del);
    }
}
d)Alternate nodes
void deleteAlt(Node* &head){
    Node* curr = head;
    while(curr!=NULL && curr->next!=NULL){
        Node* temp = curr->next;
        curr->next = temp->next;
        free(temp);
        curr = curr->next;
    }
}
e)Given sorted LinkedList delete duplicate elements
void deleteDupl(Node* &head){
    Node* curr = head;
    while(curr->next!=NULL){
        if(curr->val==curr->next->val){
            Node* temp = curr->next;
            curr->next=temp->next;
            free(temp);
        }
        else{
            curr=curr->next;
        }
    }
}
iv)Reverse
a)Print in reverse
void reversePrint(Node* &head){
    if(head==NULL){
        return;
    }
    reversePrint(head->next);
    cout<<head->val<<"->";
}
b)Reversal
Node* reverseLL (Node* &head) {
    Node* prevptr = NULL;
    Node* currptr = head;
    //currptr->next = prevptr;
    // move all 3 ptrs by one step ahead
    while(currptr!=NULL) {
    Node* nextptr = currptr->next;
    currptr->next = prevptr;
    prevptr = currptr;
    currptr = nextptr;
    }
    //when this loop ends, prevptr pointing to my last node which is new head
    Node* new_head = prevptr;
    return new_head;
    
}


Node* reverseLLRecursion (Node* &head) {
//base case
    if (head= NULL || head->next==NULL)
    return head;
    //recursive case
    Node* new_head = reverseLLRecursion (head->next);
    head->next->next = head;
    head->next = NULL; //head is now pointing to last node in reversed ll
    return new_head;
}
C)K at a time
ex: 1->2->3->4
2->1->4->3
reverse k nodes then recursion call for the remaining

Node* reverseK(Node* &head,int k){
    Node* prevptr = NULL;
    Node* currptr = head;
    int counter = 0; //for counting first k nodes
    while(currptr!=NULL && counter<k) { //reversing first k nodes
        Node* nextptr = currptr->next;
        currptr->next = prevptr;
        prevptr = currptr;
        currptr = nextptr;
        counter++;
    }
    //currptr will give us (k+1)th node
    if(currptr!=NULL) {
        Node* new_head = reverseK(currptr,k); //recursive call
        head->next = new_head;
    }
    return prevptr; //prevptr will give the new_head of connected linkedlists
    
}
int main() {
    Node* head = NULL;
    insertAtHead (head, 2);
    display (head);
    insertAtHead (head, 1);
    display (head);
    insertAtTail (head, 4);
    display (head);
    insert (head, 3,2);
    display (head);
    deleteAtHead (head);
    display (head);
    deleteAtTail (head);
    display (head);
    deleteNode(head,2);
    display(head);

    return 0;
}
