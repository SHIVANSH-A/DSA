1)Check two LL are equal
bool isEqual(Node* &head1,Node* &head2){
    Node* p1 = head1;
    Node* p2 = head2;
    
    bool flag= true;
    
    while(p1!=NULL && p2!=NULL){
        if(p1->val != p2->val){
            flag = false;
            break;
        }
        else{
            p1=p1->next;
            p2=p2->next;
        }
        
    }
    
    return flag;
    
}

2)Check intersection of LL (we can use set)
Node* moveHeadByK (Node* head, int k) {
    Node* ptr = head;
    while(k--){
        ptr=ptr->next;
    }
    return ptr;
}
int getLength(Node* head) {
    Node* temp = head;
    int length =0;
    while(temp!=NULL) {
        length++;
        temp=temp->next;
    }
    
    return length;
}
Node* getIntersection (Node head1, Node* head2) {
    //stepl: calculate lengths of both linked lists
    int 11 = getLength (head1);
    int 12 getLength (head2);
    //step2: find difference k between linkedlist and move longer ptr by k
    Node* ptr1, ptr2;
    if(l1>12){ //LL1 is longer
        int k = 11-12;
        ptr1 = moveHeadByK (head1,k);
        ptr2 = head2;
    }
    else{ //LL2 is longer
        int k = 12-11;
        ptr1 = head1;
        ptr2 = moveHeadByK(head2,k);
    }
    //step3: check for intersection
    while(ptr1){
        if(ptr1==ptr2){
            return ptr1
        }
    }
    return NULL;
}
3)Delete kth node from end
1->2->3->4->5->NULL
   p1<-------->p2
	k
void removeKthNodeFromEnd (Node* &head, int k){
    Node* ptr1 = head;
    Node* ptr2 = head;
    //move ptr2 by k steps ahead
    int count = k;
    while(count--){
    ptr2=ptr2->next;
    }
    if(ptr2==NULL){ //k is equal to length of linked list
			// we have to delete head node
	Node* temp = head;
	head = head->next;
	free(temp);
	return;}
    // now ptr2 is k steps ahead of ptr1
    //when ptr2 is at null (end of list), ptr1 will be at node to be deleted
    while(ptr2->next!=NULL){
    ptr1=ptr1->next;
    ptr2=ptr2->next;
    }
    //now ptr1 is pointing to the node before kth node from end
    // node to be deleted is ptr1->next
    Node* temp = ptr1->next;
    ptr1->next = ptr1->next->next;
    free(temp);
}

4)Given 2 sorted linked lists, merge them into 1 singly linked list such that the resulting list is also sorted.
Node* mergeSortedLL(Node* head1,Node* head2){
    Node* dummyHeadNode = new Node(-1);
    Node* ptr1 = head1;
    Node* ptr2 = head2;
    Node* ptr3 = dummyHeadNode;
    I
    while(ptr1 && ptr2) {
        if(ptr1->val < ptr2->val) {
        ptr3->next = ptr1;
        ptr1=ptr1->next;
        }
        else{
        ptr3->next = ptr2;
        ptr2=ptr2->next;
        }
        ptr3=ptr3->next;
    }
    
    if(ptr1){
        ptr3->next=ptr1;
    }else{
        ptr3->next=ptr2;
    }
    return dummyHeadNode->next;
}
5)You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.
Node* mergeKLinkedList(vector<Node* > &lists){

    while(lists.size()>1){
        Node* mergedHead = mergeSortedLL (lists[0], lists [1]);
        lists.push_back(mergedHead);
        lists.erase(lists.begin());
        lists.erase (lists.begin());
        }
    return lists [0];
}



DOUBLY LINKED LIST
 PREV | VALUE | NEXT

HEAD - PREV-> NULL
TAIL - NEXT-> NULL

#include <bits/stdc++.h>
using namespace std;
class Node{
	public:
	int val;
	Node* prev;
	Node* next;
	Node(int data) {
		val =data;
		prev = NULL;
		next = NULL;
	}
};

class DoublyLinkedList{
public:
	Node* head;
	Node* tail;
	DoublyLinkedList(){
		head = NULL; 
		tail = NULL;
}
	void insertAtHead(int val){
		Node* new_node = new Node(val);
		if(head==NULL){
			head = new_node;
			tail = new_node;
			return;
		}
		new_node->next=head;
		head->prev=new_node;
		head=new_node;
	}
	
	void insertAtTail(int val){
	    Node* new_node = new Node(val);
	    if(head==NULL){
			head = new_node;
			tail = new_node;
			return;
		}
		new_node->prev = tail;
		tail->next = new_node;
		tail=new_node;
	}
	
	void insertAtK(int val,int k){
	    Node* new_node = new Node(val);
	    Node* temp=head;
	    int count = 1;
	    while(count<k-1){
	        temp=temp->next;
	        count++;
	    }
		temp->next->prev = new_node;
		new_node->next = temp->next;
		temp->next=new_node;
		new_node->prev=temp;
		
		
	}
	
	void deleteAtStart(){
        if (head==NULL) {
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head==NULL) { //if doubly linked list had only 1 node
            tail = NULL;
        }else{
            head->prev = NULL;
        }
        free(temp);
}
	void deleteAtEnd(){
        if (tail==NULL) {
            return;
        }
        Node* temp = tail;
        tail = tail->prev;
        if (tail==NULL) { //if doubly linked list had only 1 node
            head = NULL;
        }else{
            tail->next = NULL;
        }
        free(temp);
}
	void deleteAtK(int k){
        
        Node* temp = head;
        int count =1;
        while(count<k){
            temp=temp->next;
            count++;
        }
        //Now temp is at kth Node
        temp->prev->next=temp->next;
        temp->next->prev=temp->prev;
        free(temp);
}
	
	
	void display(){
	    Node* temp = head;
	    while(temp!=NULL){
	        cout<<temp->val<<"<->";
	        temp=temp->next;
	    }cout<<endl;
	}
};


int main(){
    
    DoublyLinkedList dll;
    dll.insertAtHead(5);
    dll.insertAtHead(3);
    dll.insertAtTail(4);
    dll.insertAtTail(2);
    dll.insertAtK(6,2);
    dll.display();
    dll.deleteAtStart();
    dll.deleteAtEnd();
    dll.deleteAtK(2);
    dll.display();
    
}




1)Reversal
void reverseDll(Node* &head, Node* &tail)
	Node* currPtr = head;
	while(currPtr) {
		Node* nextPtr = currPtr->next;
		currPtr->next = currPtr->prev;
		currPtr->prev = nextPtr;
		currPtr = nextPtr;
	}
	Node* newHead = tail;
	tail = head;
	head = newHead;
}


2)Palindrome
bool isPalindromeDLL (Node* head, Node* tail)
while(head!=tail && tail!=head->prev) {
if (head->val!=tail->val) {
return false;
}
head-head->next;
tail=tail->prev;
}
return true;
}

3)Traversing from the tail delete node with same neighbours
void deleteSameNeighbourNode (Node* &head, Node* &tail){
    Node* currNode = tail->prev; //second last node
    while(currNode!=head){
        Node* prevNode = currNode->prev;
        Node* nextNode = currNode->next;
    
        if (prevNode->val==nextNode->val) {
        // i need to delete the curr node
            prevNode->next = nextNode;
            nextNode->prev = prevNode;
            free(currNode);
        }
        currNode = prevNode;
    }

}

4)Find min and max dist bet CP in LL
bool isCP(Node* &currNode){
    if(currNode->val<currNode->prev->val && currNode->val<currNode->next->val){
        return true;
    }
    if(currNode->val>currNode->prev->val && currNode->val>currNode->next->val){
        return true;
    }
    return false;
    
}
vector<int> DistBetCriticalPts(Node* head,Node* tail){
     vector<int> ans(2,INT_MAX);
     int firstpos=-1,lastpos=-1;
     Node* currNode = tail->prev;
     
     if(currNode==NULL){
         ans[0]=ans[1]=-1;
         return ans;
     }
     
     int currpos=0;
     while(currNode->prev!=NULL){
         if(isCP(currNode)){
             if(firstpos==-1){
                 lastpos=firstpos=currpos;
             }else{
                 ans[0]=min(ans[0],currpos-lastpos);
                 ans[1]=currpos-firstpos;
                 lastpos=currpos;
             }
         }
             currpos++;
             currNode=currNode->prev;
     }
     if(ans[0]==INT_MAX){
          ans[0]=ans[1]=-1;
            return ans;
     }
     
     return ans;
     
}
5)Find pair with target sum(using two pointer and LL is sorted)
vector<int> findPair(Node* head,Node* tail,int t){
    vector<int> ans(2,-1);
    int sum = 0;
    
    while(head!=tail){
        sum = head->val + tail->val;
        if(sum==t){
            ans[0]=head->val;
            ans[1]=tail->val;
            return ans;
        }
        
        if(sum>t){//if we increment head then we will get greater sum so dec tail
            tail=tail->prev;            
        }
        else{
            head=head->next;
        }
    }
    return ans;
}
