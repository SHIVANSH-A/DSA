Concept                Meaning
---------------------- --------------------------------------------------------
class                  Blueprint for objects (has data + methods)
object                 Instance of a class
public                 Accessible outside the class
vector<string>         Dynamic list of strings
member function        Function defined inside a class
range-based for loop   Loop that iterates over all elements of a container
. (dot operator)       Used to access members of a class
#include               Brings in standard library functions
using namespace std    Avoids typing std:: before each function
main()                 Program starts execution here


You can create an object in two ways:

    1)Stack allocation (most common and simple):

        Chai c; // object c is created on the stack

    2)Heap allocation (requires new):

        Chai* c = new Chai(); // object is on the heap; pointer to it is stored
        
    Chai c; automatically calls the constructor and destroys the object when it goes out of scope.
    new Chai() allocates memory dynamically on the heap and needs manual delete to free it.

| Constructor Type          | Purpose                                | Notes                                  |
| ------------------------- | -------------------------------------- | -------------------------------------- |
| Default Constructor       | Initialize with default values         | Needed if no constructor is defined    |
| Parameterized Constructor | Initialize with custom values          | Allows flexibility                     |
| Copy Constructor          | Create a copy of an object (deep copy) | Must be defined if class uses pointers |
| Destructor                | Clean up resources (like `delete`)     | Important when using `new`             |

Why Not Use Default Copying?
When your class uses pointers or dynamic memory (like new), the default copy constructor does a shallow copy:

    i)Shallow Copy (Default Behavior):

        Chai c1;
        Chai c2 = c1;  // pointer copied as-is


    This leads to:
    Both objects sharing the same memory address.
    Double delete error in destructors (undefined behavior).
    One object modifying data of the other unintentionally.

    ii)Deep Copy (Custom Copy Constructor):
    Allocates new memory.
    Copies actual content, not just the pointer.

Friend keyword(Grant member level access)
The friend keyword in C++ allows a non-member function or another class to access private or protected members of a class.
Normally, private members of a class are not accessible outside that class, but marking a function/class as a friend grants special access.

Getter/Setter
Getter: A method that returns the value of a private data member.
Setter: A method that sets or updates the value of a private data member.
| Reason           | Description                                                                      |
| ---------------- | -------------------------------------------------------------------------------- |
| Encapsulation | Keep class data private and expose only safe, controlled access                     |
| Validation    | Setters can validate data before changing it                                        |
| Flexibility   | You can later change how a value is computed or stored without affecting other code |
| Debugging     | Add logging or breakpoints in getter/setter to track value access/change            |


Delegating Constructor
A delegating constructor is a constructor that calls another constructor in the same class to reuse code and avoid duplication.


Inheritance
Inheritance is a feature in object-oriented programming that allows a class (derived class) to inherit properties and behavior (methods and variables) from another class (base class).

Purpose:
    Code reuse
    Polymorphism
    Extensibility

class Base {
public:
    int a;
};

class Derived : public Base {
public:
    int b;
};


| Inheritance Type | Base Member Type | Inherited As    | Accessible in Child Class? | Accessible Outside Class? |
| ---------------- | ---------------- | --------------- | -------------------------- | ------------------------- |
| `public`         | `public`         | `public`        |  Yes                      |  Yes                     |
| `public`         | `protected`      | `protected`     |  Yes                      |  No                      |
| `public`         | `private`        | âœ– Not inherited |  No                       |  No                      |


final keyword 

final keyword prevents:
A class from being inherited further.
A virtual function from being overridden in derived classes.

| Situation                                         | Why Use `final`                              |
| ------------------------------------------------- | -------------------------------------------- |
| Prevent misuse of base class methods              | Protect critical logic from being overridden |
| Design sealed classes (cpp - class A final )      | To ensure no further subclassing             |
| Performance optimization                          | May help compiler de-virtualize calls        |
